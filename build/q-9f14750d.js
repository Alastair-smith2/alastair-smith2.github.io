import{d as i,k as r,m as e}from"./q-c4d9033e.js";import{A as o,P as s}from"./q-94458bea.js";const d=[{text:"Learnings from cryptopals",id:"learnings-from-cryptopals",level:1},{text:"What is cryptopals? ",id:"what-is-cryptopals-",level:2},{text:'What makes a suitable cryptographic algorithm? The "trapdoor" effect. ',id:"what-makes-a-suitable-cryptographic-algorithm-the-trapdoor-effect-",level:2},{text:"Diffie-Hellman",id:"diffie-hellman",level:2},{text:"Integer factorisation ",id:"integer-factorisation-",level:3},{text:"Simplified overview of the elliptic curve discrete logarithm problem",id:"simplified-overview-of-the-elliptic-curve-discrete-logarithm-problem",level:3},{text:"Why current cryptographic solutions widely used today are secure - for now. ",id:"why-current-cryptographic-solutions-widely-used-today-are-secure---for-now-",level:2},{text:"A very easy way to shoot yourself in the foot in cryptography - insecure randomness",id:"a-very-easy-way-to-shoot-yourself-in-the-foot-in-cryptography---insecure-randomness",level:2},{text:"Summary ",id:"summary-",level:2}],p={title:"Learnings from cryptopals",meta:[{name:"author",content:"Alastair Smith"},{name:"description",content:"Some lessons learnt from doing the cryptopals challenge"},{property:"og:title",content:"Some lessons learnt from doing the cryptopals challenge"},{property:"og:description",content:"Some lessons learnt from doing the cryptopals challenge"}],styles:[],links:[],frontmatter:{}},u={title:"Learnings from cryptopals",author:"Alastair Smith",description:"Some lessons learnt from doing the cryptopals challenge",og:[{title:"Some lessons learnt from doing the cryptopals challenge",description:!0}]};function a(n){const t=Object.assign({h1:"h1",a:"a",span:"span",ol:"ol",li:"li",h2:"h2",p:"p",h3:"h3",pre:"pre",code:"code"},n.components);return e(s,{children:[e(t.h1,{id:"learnings-from-cryptopals",children:[e(t.a,{"aria-hidden":"true",tabindex:"-1",href:"#learnings-from-cryptopals",children:e(t.span,{class:"icon icon-link"})}),"Learnings from cryptopals"]}),e(t.ol,{children:[`
`,e(t.li,{children:e(t.a,{href:"#cryptopals",children:"What is cryptopals?"})}),`
`,e(t.li,{children:e(t.a,{href:"#trapdoor",children:"What makes a good cryptographic algorithm?"})}),`
`,e(t.li,{children:e(t.a,{href:"#diffie-hellman",children:"Diffie-Hellman"})}),`
`,e(t.li,{children:e(t.a,{href:"#integer-factorisation",children:"Integer factorisation"})}),`
`,e(t.li,{children:e(t.a,{href:"#ecdlp",children:"Elliptic curve discrete logarithm problem"})}),`
`,e(t.li,{children:e(t.a,{href:"#secure-for-now",children:"Why current crytopgprahic algorithms are secure - for now"})}),`
`,e(t.li,{children:e(t.a,{href:"#insecure-randomness",children:"Insecure randomness"})}),`
`,e(t.li,{children:e(t.a,{href:"#summary",children:"Summary"})}),`
`]}),e(t.h2,{id:"what-is-cryptopals-",children:[e(t.a,{"aria-hidden":"true",tabindex:"-1",href:"#what-is-cryptopals-",children:e(t.span,{class:"icon icon-link"})}),"What is cryptopals? ",e("a",{name:"cryptopals"})]}),e(t.p,{children:["At first glance people could be mistaken for thinking this post is going to be related to cryptocurrency, but that is not the case. ",e(t.a,{href:"https://cryptopals.com/",children:"Cryptopals"})," is a series of challenges that relate to cryptography. Cryptogprahy is essential to the modern internet; it helps provide security by preventing others from intercepting communication that is intended to be private, and is fundamental to efforts like ",e(t.a,{href:"https://blog.google/technology/safety-security/the-beginning-of-the-end-of-the-password/",children:"ending the need for passwords."})," The challenges on cryptopals help you learn about cryptography by providing problems that demonstrate how real-world attacks work against various algorithms. This post is some of my learnings from the cryptopals challenges and wider reading."]}),e(t.h2,{id:"what-makes-a-suitable-cryptographic-algorithm-the-trapdoor-effect-",children:[e(t.a,{"aria-hidden":"true",tabindex:"-1",href:"#what-makes-a-suitable-cryptographic-algorithm-the-trapdoor-effect-",children:e(t.span,{class:"icon icon-link"})}),'What makes a suitable cryptographic algorithm? The "trapdoor" effect. ',e("a",{name:"trapdoor"})]}),e(t.p,{children:['Cryptography heavily relies upon various "hard” maths problems. These problems which, unless you have some secret information, can take a computer a very very long time (',e(t.a,{href:"https://www.quintessencelabs.com/blog/breaking-rsa-encryption-update-state-art",children:"in some cases trillions of years"}),") to solve. These are ",e(t.a,{href:"https://en.wikipedia.org/wiki/Trapdoor_function",children:"trapdoor functions"})," - they make it easy to produce a result in one direction but incredibly difficult to produce the inverse without some secret information. Let’s look at an algorithm and how it leverages this."]}),e("a",{name:"diffie-hellman"}),e(t.h2,{id:"diffie-hellman",children:[e(t.a,{"aria-hidden":"true",tabindex:"-1",href:"#diffie-hellman",children:e(t.span,{class:"icon icon-link"})}),"Diffie-Hellman"]}),e(t.p,{children:[e(t.a,{href:"https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange#",children:"Diffie-Hellman"})," (DH) as an algorithm which paved the way for exchanging ",e(o,{href:"https://en.wikipedia.org/wiki/Key_(cryptography)",text:"crytographic keys"})," securely between parties who may never have had contact before, by establishing a joint secret. ",e(t.a,{href:"https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange",children:"Wikipedia"})," has an excellent analogy:"]}),e("img",{src:"https://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Diffie-Hellman_Key_Exchange.svg/250px-Diffie-Hellman_Key_Exchange.svg.png",style:"background-color: white; margin: 2rem auto;"})," ",e(t.p,{children:"The trapdoor effect here can be seen because even though the common paint and initial mixture are available for all to see, the mixture process is incredibly hard to reverse. This means the secret colour can't be derived from the public information alone. The clever part in DH is that both parties can mix their secret colour with the other’s initial mixture to come up with the same secret."}),e(t.p,{children:["In reality very large numbers are used instead of paint. The difficult problem here is trying to find X (the exponent) of the follow equation which has some sample inputs: 2",e("sup",{children:"X"}),"(modulus 7) = 2. In plain english what is the number that when 2 is raised to and then divided by 7 has the remainder 2? This is pretty simple to find for small numbers but with large numbers is very hard for computers. This is the ",e(t.a,{href:"https://www.khanacademy.org/computing/computer-science/cryptography/modern-crypt/v/discrete-logarithm-problem",children:"discrete logarithm problem"}),". In Diffie-Hellman the common numbers (e.g. 2 and 7) are agreed by Alice and Bob in advance. Each individual then performs the aforementioned equation with a chosen secret as the exponent. Next each indivdual shares the resulting value and then performs the operation again but this time using the resulting value from the other as the number to be raised by their secret. In the end they both end up with the same number that can be used as a secret! I enjoyed learning the maths behind this one. It was also interesting learning how to use this maths concretely in a programming language, I had been using Rust for the challenges and there's a convenient package that has the ",e(t.a,{href:"https://docs.rs/num-bigint/latest/num_bigint/struct.BigUint.html#method.modpow",children:"modpow operation"}),"."]}),e(t.p,{children:`Let's delve a bit deeper into some other maths that is leveraged to create the "trapdoor" effect in modern algorithms.`}),e(t.h3,{id:"integer-factorisation-",children:[e(t.a,{"aria-hidden":"true",tabindex:"-1",href:"#integer-factorisation-",children:e(t.span,{class:"icon icon-link"})}),"Integer factorisation ",e("a",{name:"integer-factorisation"})]}),e(t.p,{children:["Given the number 713, can you tell me what its prime factors are without using a computer? By trial and error eventually you’d calculate that they were 23 and 31. But what if I gave you the number 843151 and said I was looking for the two specific prime factors that multiply together to make that number? By hand you’d likely not bother but maybe you’d google it. On the other hand what if I had asked for the result of multiplying 863 and 977 together? That is easy and number is 843151. This maths, integer factorisation using primes only, is at the heart of the popular ",e(t.a,{href:"https://en.wikipedia.org/wiki/RSA*(cryptosystem)",children:"RSA algorithm"})," that is widely used for secure communication. Part of the RSA algorithm is generating a number (N, which is used as a modulus in the algorithm and shared publicly) from two very large prime numbers. In real life the prime numbers are hundred of digits long. If the prime numbers could easily be derived from N then the RSA algorithm would be rendered insecure because the private key, which is used to decrypt messages that are encrypted with the public key, could be derived. For current RSA-2048 bit encryption keys it'd take a ",e(t.a,{href:"https://www.quintessencelabs.com/blog/breaking-rsa-encryption-update-state-art",children:"computer ~300 trillion years"})," to find the prime numbers. There are ways to attack RSA if the primes are too small or too close together."]}),e("a",{name:"ecdlp"}),e(t.h3,{id:"simplified-overview-of-the-elliptic-curve-discrete-logarithm-problem",children:[e(t.a,{"aria-hidden":"true",tabindex:"-1",href:"#simplified-overview-of-the-elliptic-curve-discrete-logarithm-problem",children:e(t.span,{class:"icon icon-link"})}),"Simplified overview of the elliptic curve discrete logarithm problem"," "]}),e(t.p,{children:['This section we’ll be looking at some maths involved in Elliptic Curve Cryptography (ECC). Hopefully upon completing this section you’ll feel like you understand a simplified explanation of the "hard” maths problem at the core of ECC. An elliptic curve satisfies the equation y',e("sup",{children:"2"})," = x",e("sup",{children:"3"})," + ax + b and across the x-axis is symmetrical. For our purpose the top right curve on the diagram below is the most helpful image."]}),e("img",{src:"https://upload.wikimedia.org/wikipedia/commons/thumb/d/db/EllipticCurveCatalog.svg/800px-EllipticCurveCatalog.svg.png",style:"background-color: white; margin: 2rem auto;"}),e(t.p,{children:[`An interesting problem they present is represented in the form of an equation nP = E, where the value n here is the number
of times point P was "dotted” on a curve. Before explaining what "dotted” means a
key piece of information is that for two given points on a curve (e.g. our starting
points A and B that will both be on one side of the x-axis) there will always be at most a third point. What this means is for our
starting point we can find the third point, C, on the curve by drawing a straight
line through A and B. Once we’ve found where this line intercepts on the curve we
find the corresponding point of the curve on the other side of the x-axis and this
becomes C. Now we repeat the process using A and C as our two points to find where
the next part of the graph is intercepted and flip over the x-axis again to find D. If you’d like
to see a visual representation of this process and a good resource I’d highly recommend
the following `,e(t.a,{href:"https://www.youtube.com/watch?v=gAtBM06xwaw",children:"video"}),`. This process,
which is the adding of a point to itself, is often referred to "dotting”. Formally this is called
`,e(t.a,{href:"https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication",children:"Elliptic curve point multiplication"}),`
and the number of times we "dot” becomes our private key (n). E is the result of
how many times we "dotted” the starting point P. Finding n from E and P is incredibly
difficult but finding E from n and P is simple for computers. This problem is known
as the elliptic curve discrete logarithm problem (ecdlp) and is a form of the discrete
logarithm problem we saw earlier.`]}),e(t.p,{children:[`An interesting point about elliptic curves in comparison to algorithms like RSA is for numbers of
the same size they essentially give us more "bang for our buck” in terms of security.
According to this `,e(t.a,{href:"https://eprint.iacr.org/2013/635.pdf?ref=blog.cloudflare.com",children:"paper"}),`,
that has the analogy of how much water you’d need to bring to a boil for the idea
of difficulty or "security”, it only takes a 210-bit elliptic curve key to match
a 1990-bit RSA key and hence why algorithms like `,e(t.a,{href:"https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm",children:"ECDSA"}),`
are popular.`]}),e(t.h2,{id:"why-current-cryptographic-solutions-widely-used-today-are-secure---for-now-",children:[e(t.a,{"aria-hidden":"true",tabindex:"-1",href:"#why-current-cryptographic-solutions-widely-used-today-are-secure---for-now-",children:e(t.span,{class:"icon icon-link"})}),"Why current cryptographic solutions widely used today are secure - for now. ",e("a",{name:"secure-for-now"})]}),e(t.p,{children:["While these algorithms are popular today, they are almost certainly going to be replaced in the future because of ",e(t.a,{href:"https://blog.cloudflare.com/towards-post-quantum-cryptography-in-tls/",children:"quantum computers"}),". A quantum computer could execute algorithms (",e(t.a,{href:"https://quantum-computing.ibm.com/composer/docs/iqx/guide/shors-algorithm",children:"Shor’s algorithm"}),' is the one of most interest in relation to this post) that would be able to solve the "hard" problems discussed here in a matter of seconds or minutes. Quantum computers will essentially render current cryptographic algorithms as useless and nothing would be secure. Thankfully there has been a lot of work already done to solve this problem with the development of post-quantum algorithms. ',e(t.a,{href:"https://blog.cloudflare.com/nist-post-quantum-surprise/",children:"This blog post"})," gives a detailed walkthrough of various algorithms with their various trade-offs and which ones are being standardised for those who are interested."]}),e(t.h2,{id:"a-very-easy-way-to-shoot-yourself-in-the-foot-in-cryptography---insecure-randomness",children:[e(t.a,{"aria-hidden":"true",tabindex:"-1",href:"#a-very-easy-way-to-shoot-yourself-in-the-foot-in-cryptography---insecure-randomness",children:e(t.span,{class:"icon icon-link"})}),"A very easy way to shoot yourself in the foot in cryptography - insecure randomness",e("a",{name:"insecure-randomness"})]}),e(t.p,{children:['Cryptography needs a degree of randomness. One example is if the same word, e.g. "hello”, always produced the same ciphertext (the output of the message into an encryption function, in this case "hello”) then it’d be very easy to decipher messages over time. This is because an attacker could build a dictionary of how plaintext relates to ciphertext. Pseduo-Random Number Generators (PRNGs) are often used to approximate randomness in programs (e.g. a head or tail coin flip) but are actually highly predictable because the sequence of numbers they produce are based off a seed. The trouble comes in when PRNGs are used for cryptographic purposes because of all of a sudden what should be seemingly random isn’t. For example ',e(t.a,{href:"https://owasp.org/www-community/vulnerabilities/Insecure_Randomness",children:"OWASP"})," give a great example where a receipt url is generated using a PRNG for part of the url with the current time as the seed:"]}),e(t.pre,{children:e(t.code,{class:"language-java",children:[e(t.span,{class:"token class-name",children:"String"})," ",e(t.span,{class:"token class-name",children:"GenerateReceiptURL"}),e(t.span,{class:"token punctuation",children:"("}),e(t.span,{class:"token class-name",children:"String"})," baseUrl",e(t.span,{class:"token punctuation",children:")"})," ",e(t.span,{class:"token punctuation",children:"{"}),`
    `,e(t.span,{class:"token class-name",children:"Random"})," ranGen ",e(t.span,{class:"token operator",children:"="})," ",e(t.span,{class:"token keyword",children:"new"})," ",e(t.span,{class:"token class-name",children:"Random"}),e(t.span,{class:"token punctuation",children:"("}),e(t.span,{class:"token punctuation",children:")"}),e(t.span,{class:"token punctuation",children:";"}),`
    ranGen`,e(t.span,{class:"token punctuation",children:"."}),e(t.span,{class:"token function",children:"setSeed"}),e(t.span,{class:"token punctuation",children:"("}),e(t.span,{class:"token punctuation",children:"("}),e(t.span,{class:"token keyword",children:"new"})," ",e(t.span,{class:"token class-name",children:"Date"}),e(t.span,{class:"token punctuation",children:"("}),e(t.span,{class:"token punctuation",children:")"}),e(t.span,{class:"token punctuation",children:")"}),e(t.span,{class:"token punctuation",children:"."}),e(t.span,{class:"token function",children:"getTime"}),e(t.span,{class:"token punctuation",children:"("}),e(t.span,{class:"token punctuation",children:")"}),e(t.span,{class:"token punctuation",children:")"}),e(t.span,{class:"token punctuation",children:";"}),`
    `,e(t.span,{class:"token keyword",children:"return"}),e(t.span,{class:"token punctuation",children:"("}),"baseUrl ",e(t.span,{class:"token operator",children:"+"})," ",e(t.span,{class:"token class-name",children:"Gen"}),e(t.span,{class:"token punctuation",children:"."}),e(t.span,{class:"token function",children:"nextInt"}),e(t.span,{class:"token punctuation",children:"("}),e(t.span,{class:"token number",children:"400000000"}),e(t.span,{class:"token punctuation",children:")"})," ",e(t.span,{class:"token operator",children:"+"})," ",e(t.span,{class:"token string",children:'".html"'}),e(t.span,{class:"token punctuation",children:")"}),e(t.span,{class:"token punctuation",children:";"}),`
`,e(t.span,{class:"token punctuation",children:"}"}),`
`]})}),e(t.p,{children:"The problem here is that if an attacker determined that a time was the seed for the url then it’s possible for them a) identify other receipt urls by brute forcing time ranges and b) predict future valid URLs based on a given time. As on the OWASP page, DO NOT DO THIS. Instead Cryptographic Pseduo-Random Number Generators (CPRNGs) are designed for these scenarios because they are not predictable in the same manner and should be used."}),e(t.p,{children:["There are algorithms that depend upon an initialisation vector (IV) for randomness to ensure repeated words do not produce repeated cipher text as described earlier. Using an inappropriate PRNG that repeats values with these algorithms in some circumstances ",e(t.a,{href:"https://stackered.com/blog/iv-mishandling/",children:"can actually lead to attackers being able to determine the plaintext of a ciphertext"})," without the encryption key. From a security perspective this would be disastrous."]}),e(t.h2,{id:"summary-",children:[e(t.a,{"aria-hidden":"true",tabindex:"-1",href:"#summary-",children:e(t.span,{class:"icon icon-link"})}),"Summary ",e("a",{name:"summary"})]}),e(t.p,{children:`I really enjoyed (and found very frustrating at points) some of the cryptopals challenges. I've learned a lot about cryptography that I didn't know before such as the inner workings of various algorithms and some of the "hard” maths problems involved. There are many elements (e.g. the inner workings of elliptic curves) that I would not dare claim to be an expert about but I have a lot more working knowledge and points of reference than I did when I started cryptopals.`}),e(t.p,{children:"I ran into a situation recently where a upgrading a dependency highlighted the use of a no longer fit for purpose algorithm in a system. Furthermore while considering solutions one of options (very quickly discounted given the following) actually rolled their own version of the outdated algorithm in a library... It was very rewarding to be able to apply some of the knowledge learned from doing some of cryptopal challenges in that context."})]})}function l(n={}){const{wrapper:t}=n.components||{};return t?e(t,Object.assign({},n,{children:e(a,n)})):a(n)}const m=()=>i(r,{children:i(l,{},3,null)},3,"7VVAfaAb");export{m as default,u as frontmatter,p as head,d as headings};
