import{d as r,z as i,c as e}from"./q-af9f9f38.js";import{P as n}from"./q-238f6065.js";const c=[{text:"Contents",id:"contents",level:1},{text:"What makes a suitable cryptographic algorithm, a “trapdoor”.",id:"what-makes-a-suitable-cryptographic-algorithm-a-trapdoor",level:2},{text:"Why cryptographic solutions widely used today are secure, for now.",id:"why-cryptographic-solutions-widely-used-today-are-secure-for-now",level:2},{text:"It’s amazingly simple to shoot yourself in the foot with cryptography algorithms",id:"its-amazingly-simple-to-shoot-yourself-in-the-foot-with-cryptography-algorithms",level:2},{text:"Implementing Diffie-Hellman",id:"implementing-diffie-hellman",level:2},{text:"Summary",id:"summary",level:2}],d={title:"Some learnings from cryptopals",meta:[{name:"author",content:"Alastair Smith"},{name:"description",content:"Some lessons learnt from doing the cryptopal challenge"},{property:"og:title",content:"Some lessons learnt from doing the cryptopal challenge"},{property:"og:description",content:"Some lessons learnt from doing the cryptopal challenge"}],styles:[],links:[],frontmatter:{}},p={title:"Some learnings from cryptopals",author:"Alastair Smith",description:"Some lessons learnt from doing the cryptopal challenge",og:[{title:"Some lessons learnt from doing the cryptopal challenge",description:!0}]};function a(o){const t=Object.assign({h1:"h1",a:"a",span:"span",ol:"ol",li:"li",p:"p",h2:"h2",blockquote:"blockquote"},o.components);return e(n,{children:[e(t.h1,{id:"contents",children:[e(t.a,{"aria-hidden":"true",tabindex:"-1",href:"#contents",children:e(t.span,{class:"icon icon-link"})}),"Contents"]}),e(t.ol,{children:[`
`,e(t.li,{children:e(t.a,{href:"#trapdoor",children:"What makes a good cryptographic algorithm"})}),`
`,e(t.li,{children:e(t.a,{href:"#secure-for-now",children:"Why current crytopgprahic algorithms are secure, for now"})}),`
`,e(t.li,{children:e(t.a,{href:"#difficult",children:"It's incredibly easy to make mistakes"})}),`
`,e(t.li,{children:e(t.a,{href:"#diffie-hellman",children:"Diffie-Hellman"})}),`
`,e(t.li,{children:e(t.a,{href:"#summary",children:"Summary"})}),`
`]}),e(t.p,{children:["From first glance people could be mistaken for thinking somehow this is related to “crypto” in the sense of cryptocurrency. Rather it’s about lessons learnt about cryptography while doing some of the challenges from ",e(t.a,{href:"https://cryptopals.com/",children:"https://cryptopals.com/"})," and wider reading in wanting to expand my understanding of cryptography."]}),e(t.h2,{id:"what-makes-a-suitable-cryptographic-algorithm-a-trapdoor",children:[e(t.a,{"aria-hidden":"true",tabindex:"-1",href:"#what-makes-a-suitable-cryptographic-algorithm-a-trapdoor",children:e(t.span,{class:"icon icon-link"})}),"What makes a suitable cryptographic algorithm, a “trapdoor”.",e("a",{name:"trapdoor"})]}),e(t.p,{children:["The majority of cryptographic algorithms in play today that are regarded as relatively secure (e.g. ",e(t.a,{href:"https://en.wikipedia.org/wiki/RSA_(cryptosystem)",children:"RSA"}),", ",e(t.a,{href:"https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm",children:"ECDSA"}),") have the element of being like a “trapdoor”. ",e(t.a,{href:"https://en.wikipedia.org/wiki/Trapdoor_function",children:"Trapdoor functions"})," are named as such because it’s easy to produce a result in one direction, but difficult to produce the inverse."]}),e(t.h2,{id:"why-cryptographic-solutions-widely-used-today-are-secure-for-now",children:[e(t.a,{"aria-hidden":"true",tabindex:"-1",href:"#why-cryptographic-solutions-widely-used-today-are-secure-for-now",children:e(t.span,{class:"icon icon-link"})}),"Why cryptographic solutions widely used today are secure, for now.",e("a",{name:"secure-for-now"})]}),e(t.p,{children:["Following on from the above, many of the current “trapdoor functions” leverage integer ",e(t.a,{href:"https://en.wikipedia.org/wiki/Integer_factorization",children:"factorization"}),", RSA being the prime example. Though in recent times elliptic curves have become a popular alternative where the “trapdoor” relies upon computing discrete logarithms, ",e(t.a,{href:"https://blog.cloudflare.com/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/",children:"https://blog.cloudflare.com/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/"})," is an excellent resource on the inner workings and the contrast to factorization. The key point here with these approaches is that current computers do not have sufficient power to produce the inverse in a reasonable time frame. However that’s likely to change in the future as outlined in ",e(t.a,{href:"https://blog.cloudflare.com/towards-post-quantum-cryptography-in-tls/",children:"https://blog.cloudflare.com/towards-post-quantum-cryptography-in-tls/"}),", with quantum computers in the works, there is a very real need to start creating algorithms that are post-quantum proof. For those interested, ",e(t.a,{href:"https://blog.cloudflare.com/nist-post-quantum-surprise/",children:"https://blog.cloudflare.com/nist-post-quantum-surprise/"})," is a great discussion of some of the current challenges around post-quantum cryptography and some of the algorithms that are looking to be standardised."]}),e(t.h2,{id:"its-amazingly-simple-to-shoot-yourself-in-the-foot-with-cryptography-algorithms",children:[e(t.a,{"aria-hidden":"true",tabindex:"-1",href:"#its-amazingly-simple-to-shoot-yourself-in-the-foot-with-cryptography-algorithms",children:e(t.span,{class:"icon icon-link"})}),"It’s amazingly simple to shoot yourself in the foot with cryptography algorithms",e("a",{name:"difficult"})]}),e(t.p,{children:["There are some truly ingenious ways to break cryptographic algorithms, on the cryptopals ",e(t.a,{href:"https://cryptopals.com/",children:"home page"})," it states"]}),e(t.blockquote,{children:[`
`,e(t.p,{children:"If you're not that familiar with crypto already, or if your familiarity comes mostly from things like Applied Cryptography, this fact may surprise you: most crypto is fatally broken. The systems we're relying on today that aren't known to be fatally broken are in a state of just waiting to be fatally broken. Nobody is sure that TLS 1.2 or SSH 2 or OTR are going to remain safe as designed."}),`
`]}),e(t.p,{children:"and given some of the attacks that are walked, it’s understandable why the more disconcerting statement is also made:"}),e(t.blockquote,{children:[`
`,e(t.p,{children:"Counting is not a hard problem. But cryptography is. There are just a few things you can screw up to get the size of a buffer wrong. There are tens, probably hundreds, of obscure little things you can do to take a cryptosystem that should be secure even against an adversary with more CPU cores than there are atoms in the solar system, and make it solveable with a Perl script and 15 seconds. Don't take our word for it: do the challenges and you'll see."}),`
`]}),e(t.p,{children:["Some of the ways aren’t obvious until working through the challenges, ",e(t.a,{href:"https://en.wikipedia.org/wiki/Padding_oracle_attack",children:"even little clues like a server response taking slightly longer based on encryption/ decryption flow have been used to decrypt ciphertexts"}),", although thankfully that attack method isn’t as widely susceptible nowadays."]}),e(t.h2,{id:"implementing-diffie-hellman",children:[e(t.a,{"aria-hidden":"true",tabindex:"-1",href:"#implementing-diffie-hellman",children:e(t.span,{class:"icon icon-link"})}),"Implementing Diffie-Hellman",e("a",{name:"diffie-hellman"})]}),e(t.p,{children:["This is the activity I enjoyed most, albeit one of the more simpler challenges. The problem around factorization really sunk in while learning about modpow in ",e(t.a,{href:"https://docs.rs/num-bigint/latest/num_bigint/struct.BigUint.html#method.modpow",children:"Rust"}),"."]}),e(t.h2,{id:"summary",children:[e(t.a,{"aria-hidden":"true",tabindex:"-1",href:"#summary",children:e(t.span,{class:"icon icon-link"})}),"Summary",e("a",{name:"summary"})]}),e(t.p,{children:"I really enjoyed (and found very frustrating at points) some of the cryptopals challenges, I would like to say I’ve learned some of the fundamentals of how different algorithms worked and more importantly why they’re considered fit for purpose (or not). There are still many elements (e.g. the inner workings of elliptic curves) that I wouldn’t say I’m comfortable with but I have a lot more working knowledge than I did when I started cryptopals. I ran into a situation recently where a NodeJS upgrade actually highlighted the use of a no longer fit for purpose algorithm in a system. Furthermore while considering solutions it was found that one of options (very quickly discounted given the following) actually rolled their own JavaScript version of an algorithm that is no longer considered fit for purpose in OpenSSL 3... It was nice to see something learned out of interest came in very practical."})]})}function l(o={}){const{wrapper:t}=o.components||{};return t?e(t,Object.assign({},o,{children:e(a,o)})):a(o)}const m=()=>r(i,{children:r(l,{},3,null)},3,"h_Q7PFY3");export{m as default,p as frontmatter,d as head,c as headings};
